{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAkCA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC7B,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAG3D,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACpB,OACCR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAoBlBC,MApDf,SAAAC,GAAkD,IAAlCN,EAAkCM,EAAlCN,MAAON,EAA2BY,EAA3BZ,OAAQa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACtC,OACCZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACdL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEnCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACdL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAG7Dd,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACKgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eCyCHC,6MA3DdC,MAAQ,KAaRC,cAAgB,WAUf,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACpC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACNxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAOlBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQb,EAAKc,WADb,OACPb,EADOU,EAAAI,KAEbf,EAAKgB,SAAS,CACbf,WAHY,wBAAAU,EAAAM,SAAAT,QAWdM,SAAW,WAEV,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,uIAnC1BG,KAAKpB,8CAsCG,IACAN,EAAW0B,KAAK7B,MAAhBG,OACR,OACC1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAEhCA,EACG0B,KAAK5B,gBACL,kBAvDW6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.edf00bde.chunk.js","sourcesContent":["// import React, {Component} from 'react';\r\n// stateless functional(dump Component)를 사용하게 된다면 Component를 import할 필요가 없다.\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n\treturn (\r\n\t\t<div className=\"Movie\">\r\n\t\t\t<div className=\"Movie_Columns\">\r\n\t\t\t\t<MoviePoster poster={poster} alt={title}/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"Movie_Columns\">\r\n\t\t\t\t<h1>{title}</h1>\r\n\t\t\t\t<div className=\"Movie_Genres\">\r\n\t\t\t\t\t{genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* <p className=\"Movie_Synopsis\"> */}\r\n\t\t\t\t\t<LinesEllipsis\r\n\t\t\t\t\t\t\t\t\t text={synopsis}\r\n\t\t\t\t\t\t\t\t\t maxLine='3'\r\n\t\t\t\t\t\t\t\t\t ellipsis='...'\r\n\t\t\t\t\t\t\t\t\t trimRight\r\n\t\t\t\t\t\t\t\t\t basedOn='letters'\r\n\t\t\t\t\t\t\t\t\t />\r\n\t\t\t\t{/* </p> */}\r\n\t\t\t</div>\r\n\t</div>\r\n\t)\r\n}\r\n\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n\treturn (<img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>)\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n\treturn (\r\n\t\t<span className=\"Movie_Genre\">{genre}</span>\r\n\t)\r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\tposter: PropTypes.string.isRequired,\r\n\tgenres: PropTypes.array.isRequired,\r\n\tsynopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n\tposter: PropTypes.string.isRequired,\r\n\talt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n\tgenre: PropTypes.string.isRequired\r\n}\r\nexport default Movie;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\n// exprot한 Movie 컴포넌트를 사용\r\nimport Movie from './Movie';\r\n\r\nclass App extends Component {\r\n\r\n\tstate = {};\r\n\r\n\tcomponentWillMount() {}\r\n\r\n\r\n\t// 사이즈가 크면 좋은 코딩 방법이 아니기 떄문에\r\n\t// then이 많아져서 callback이 많이 발생하는 코드를 작성하는 것 대신 _getMovies를 사용\r\n\tcomponentDidMount() {\r\n\t\tthis._getMovies();\r\n\t}\r\n\r\n\t//API Call\r\n\t// key 인덱스를 사용하면 속도가 그려진다 --> key 값을 id를 이용해서 부여한다.\r\n\t_renderMovies = () => {\r\n\t\tconst movies = this.state.movies.map(movie => {\r\n\t\t\treturn <Movie\r\n\t\t\t\ttitle={movie.title_english}\r\n\t\t\t\tposter={movie.medium_cover_image}\r\n\t\t\t\tkey={movie.id}\r\n\t\t\t\tgenres={movie.genres}\r\n\t\t\t\tsynopsis={movie.synopsis}\r\n\t\t\t\t/>\r\n\t\t})\r\n\t\treturn movies\r\n\t}\r\n\t// 순서와 상관없이 진행\r\n\t// callApi 함수 실행이 된 후에 아래라인이 실행된다.\r\n\t _getMovies = async () => {\r\n\t\tconst movies = await this._callApi()\r\n\t\tthis.setState({\r\n\t\t\tmovies\r\n\t\t})\r\n\t}\r\n\r\n\t// 1. fetch의 데이터 가져오기가 실행 되면 (성공하든 말든 상관없음)\r\n\t// 2. then이 실행되고\r\n\t// then 함수는 1개의 attribute(Object) = fecth의 결과물만 준다\r\n\t// 3. catch가 실행된다. 위의 라인이 에러가 발생하면 작업을 실행해라 ex) console.log 작업\r\n\t_callApi = () => {\r\n\t\t//Data 가져오기\r\n\t\treturn fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\r\n\t\t.then(response => response.json())\r\n\t\t.then(json => json.data.movies)\r\n\t\t.catch(err => console.log(err))\r\n\t}\r\n\t// state에 데이터가 유무에 따라 class 변경\r\n\trender() {\r\n\t\tconst { movies } = this.state\r\n\t\treturn (\r\n\t\t\t<div className={movies ? \"App\" : \"App--loading\"}>\r\n\t\t\t{\r\n\t\t\t\tmovies\r\n\t\t\t\t\t? this._renderMovies()\r\n\t\t\t\t\t: 'Loading'\r\n\t\t\t}\r\n\t\t</div>);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}